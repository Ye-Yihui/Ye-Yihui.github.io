<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>奋斗</title>
  
  <subtitle>人工智能觅知音！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="ye-yihui.github.io/"/>
  <updated>2017-02-14T08:07:18.510Z</updated>
  <id>ye-yihui.github.io/</id>
  
  <author>
    <name>YYh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="ye-yihui.github.io/2017/10/17/JDBC%E7%AC%94%E8%AE%B0/"/>
    <id>ye-yihui.github.io/2017/10/17/JDBC笔记/</id>
    <published>2017-10-17T14:18:39.995Z</published>
    <updated>2017-02-14T08:07:18.510Z</updated>
    
    <content type="html"><![CDATA[<p>##JDBC</p><blockquote><p>JAVA Database Connectivity java 数据库连接</p></blockquote><ul><li>为什么会出现JDBC</li></ul><blockquote><p>SUN公司提供的一种数据库访问规则、规范, 由于数据库种类较多，并且java语言使用比较广泛，sun公司就提供了一种规范，让其他的数据库提供商去实现底层的访问规则。 我们的java程序只要使用sun公司提供的jdbc驱动即可。</p></blockquote><p>###使用JDBC的基本步骤</p><ol><li><p>注册驱动</p><pre><code>DriverManager.registerDriver(new com.mysql.jdbc.Driver());</code></pre></li><li><p>建立连接</p><pre><code>//DriverManager.getConnection(&quot;jdbc:mysql://localhost/test?user=monty&amp;password=greatsqldb&quot;);    //2. 建立连接 参数一： 协议 + 访问的数据库 ， 参数二： 用户名 ， 参数三： 密码。    conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost/student&quot;, &quot;root&quot;, &quot;root&quot;);</code></pre></li><li><p>创建statement</p><pre><code>//3. 创建statement ， 跟数据库打交道，一定需要这个对象st = conn.createStatement();</code></pre></li><li><p>执行sql ，得到ResultSet</p><pre><code>//4. 执行查询 ， 得到结果集    String sql = &quot;select * from t_stu&quot;;    rs = st.executeQuery(sql);</code></pre></li><li><p>遍历结果集</p><pre><code>//5. 遍历查询每一条记录    while(rs.next()){        int id = rs.getInt(&quot;id&quot;);        String name = rs.getString(&quot;name&quot;);        int age = rs.getInt(&quot;age&quot;);        System.out.println(&quot;id=&quot;+id + &quot;===name=&quot;+name+&quot;==age=&quot;+age);    }</code></pre></li><li><p>释放资源</p></li></ol><pre><code>if (rs != null) {    try {        rs.close();    } catch (SQLException sqlEx) { } // ignore     rs = null;}...</code></pre><p>###JDBC 工具类构建</p><ol><li>资源释放工作的整合</li></ol><ol><li>驱动防二次注册</li></ol><pre><code>DriverManager.registerDriver(new com.mysql.jdbc.Driver());Driver 这个类里面有静态代码块，一上来就执行了，所以等同于我们注册了两次驱动。 其实没这个必要的。//静态代码块 ---&gt; 类加载了，就执行。 java.sql.DriverManager.registerDriver(new Driver());最后形成以下代码即可。Class.forName(&quot;com.mysql.jdbc.Driver&quot;);    </code></pre><ol><li><p>使用properties配置文件</p><ol><li><p>在src底下声明一个文件 xxx.properties ，里面的内容吐下：</p><pre><code>driverClass=com.mysql.jdbc.Driverurl=jdbc:mysql://localhost/studentname=rootpassword=root</code></pre></li><li><p>在工具类里面，使用静态代码块，读取属性</p></li></ol></li></ol><pre><code>static{    try {        //1. 创建一个属性配置对象        Properties properties = new Properties();        InputStream is = new FileInputStream(&quot;jdbc.properties&quot;); //对应文件位于工程根目录        //使用类加载器，去读取src底下的资源文件。 后面在servlet  //对应文件位于src目录底下        //InputStream is = JDBCUtil.class.getClassLoader().getResourceAsStream(&quot;jdbc.properties&quot;);        //导入输入流。        properties.load(is);        //读取属性        driverClass = properties.getProperty(&quot;driverClass&quot;);        url = properties.getProperty(&quot;url&quot;);        name = properties.getProperty(&quot;name&quot;);        password = properties.getProperty(&quot;password&quot;);    } catch (Exception e) {        e.printStackTrace();    }}</code></pre><p>###数据库的CRUD sql</p><ul><li><p>insert</p><pre><code>INSERT INTO t_stu (NAME , age) VALUES (&apos;wangqiang&apos;,28)</code></pre></li></ul><pre><code>INSERT INTO t_stu VALUES (NULL,&apos;wangqiang2&apos;,28)// 1. 获取连接对象    conn = JDBCUtil.getConn();    // 2. 根据连接对象，得到statement    st = conn.createStatement();    //3. 执行添加    String sql = &quot;insert into t_stu values(null , &apos;aobama&apos; , 59)&quot;;    //影响的行数， ，如果大于0 表明操作成功。 否则失败    int result = st.executeUpdate(sql);    if(result &gt;0 ){        System.out.println(&quot;添加成功&quot;);    }else{        System.out.println(&quot;添加失败&quot;);    }</code></pre><ul><li><p>delete</p><pre><code>DELETE FROM t_stu WHERE id = 6</code></pre></li></ul><pre><code>// 1. 获取连接对象    conn = JDBCUtil.getConn();    // 2. 根据连接对象，得到statement    st = conn.createStatement();    //3. 执行添加    String sql = &quot;delete from t_stu where name=&apos;aobama&apos;&quot;;    //影响的行数， ，如果大于0 表明操作成功。 否则失败    int result = st.executeUpdate(sql);    if(result &gt;0 ){        System.out.println(&quot;删除成功&quot;);    }else{        System.out.println(&quot;删除失败&quot;);    }</code></pre><ul><li><p>query</p><pre><code>SELECT * FROM t_stu</code></pre></li></ul><pre><code>// 1. 获取连接对象conn = JDBCUtil.getConn();// 2. 根据连接对象，得到statementst = conn.createStatement();// 3. 执行sql语句，返回ResultSetString sql = &quot;select * from t_stu&quot;;rs = st.executeQuery(sql);// 4. 遍历结果集while (rs.next()) {    String name = rs.getString(&quot;name&quot;);    int age = rs.getInt(&quot;age&quot;);    System.out.println(name + &quot;   &quot; + age);}</code></pre><ul><li><p>update</p><pre><code>UPDATE t_stu SET age = 38 WHERE id = 1;</code></pre></li></ul><pre><code>// 1. 获取连接对象    conn = JDBCUtil.getConn();    // 2. 根据连接对象，得到statement    st = conn.createStatement();    //3. 执行添加    String sql = &quot;update t_stu set age = 26 where name =&apos;qyq&apos;&quot;;    //影响的行数， ，如果大于0 表明操作成功。 否则失败    int result = st.executeUpdate(sql);    if(result &gt;0 ){        System.out.println(&quot;更新成功&quot;);    }else{        System.out.println(&quot;更新失败&quot;);    }</code></pre><p>###使用单元测试，测试代码</p><ol><li><p>定义一个类， TestXXX , 里面定义方法 testXXX.</p></li><li><p>添加junit的支持。 </p><pre><code>右键工程 --- add Library --- Junit --- Junit4</code></pre></li><li><p>在方法的上面加上注解 ， 其实就是一个标记。</p><pre><code>@Testpublic void testQuery() {    ...}</code></pre></li><li><p>光标选中方法名字，然后右键执行单元测试。  或者是打开outline视图， 然后选择方法右键执行。</p></li></ol><p>###Dao模式</p><blockquote><p>Data Access Object 数据访问对象</p></blockquote><ol><li>新建一个dao的接口， 里面声明数据库访问规则</li></ol><pre><code>/** * 定义操作数据库的方法 */public interface UserDao {    /**     * 查询所有     */    void findAll();}</code></pre><ol><li>新建一个dao的实现类，具体实现早前定义的规则</li></ol><pre><code>    public class UserDaoImpl implements UserDao{    @Override    public void findAll() {        Connection conn = null;        Statement st = null;        ResultSet rs = null;        try {            //1. 获取连接对象            conn = JDBCUtil.getConn();            //2. 创建statement对象            st = conn.createStatement();            String sql = &quot;select * from t_user&quot;;            rs = st.executeQuery(sql);            while(rs.next()){                String userName = rs.getString(&quot;username&quot;);                String password = rs.getString(&quot;password&quot;);                System.out.println(userName+&quot;=&quot;+password);            }        } catch (Exception e) {            e.printStackTrace();        }finally {            JDBCUtil.release(conn, st, rs);        }    }}</code></pre><ol><li><p>直接使用实现</p><pre><code>@Testpublic void testFindAll(){    UserDao dao = new UserDaoImpl();    dao.findAll();}</code></pre></li></ol><p>##Statement安全问题</p><ol><li>Statement执行 ，其实是拼接sql语句的。  先拼接sql语句，然后在一起执行。 </li></ol><pre><code>String sql = &quot;select * from t_user where username=&apos;&quot;+ username  +&quot;&apos; and password=&apos;&quot;+ password +&quot;&apos;&quot;;UserDao dao = new UserDaoImpl();dao.login(&quot;admin&quot;, &quot;100234khsdf88&apos; or &apos;1=1&quot;);SELECT * FROM t_user WHERE username=&apos;admin&apos; AND PASSWORD=&apos;100234khsdf88&apos; or &apos;1=1&apos; 前面先拼接sql语句， 如果变量里面带有了 数据库的关键字，那么一并认为是关键字。 不认为是普通的字符串。 rs = st.executeQuery(sql);</code></pre><h2 id="PrepareStatement"><a href="#PrepareStatement" class="headerlink" title="PrepareStatement"></a>PrepareStatement</h2><blockquote><p>该对象就是替换前面的statement对象。</p></blockquote><ol><li>相比较以前的statement， 预先处理给定的sql语句，对其执行语法检查。 在sql语句里面使用 ? 占位符来替代后续要传递进来的变量。 后面进来的变量值，将会被看成是字符串，不会产生任何的关键字。</li></ol><pre><code>String sql = &quot;insert into t_user values(null , ? , ?)&quot;; ps = conn.prepareStatement(sql); //给占位符赋值 从左到右数过来，1 代表第一个问号， 永远你是1开始。 ps.setString(1, userName); ps.setString(2, password);</code></pre><p>##总结：</p><ol><li><p>JDBC入门</p></li><li><p>抽取工具类  ###</p></li><li><p>Statement CRUD ###</p><pre><code>演练crud</code></pre></li><li><p>Dao模式  ###</p><pre><code>声明与实现分开</code></pre></li><li><p>PrepareStament CRUD ###</p><pre><code>预处理sql语句，解决上面statement出现的问题</code></pre></li></ol><p>##作业：</p><pre><code>1. dao里面声明 增删查改， 以及登录的方法    登录方法 ：        要求，成功后返回该用户的所有信息。 字段不限。    查询：        如果是findAll. 肯定是返回一个集合  List&lt;User&gt;    增加 &amp; 删除 &amp; 更新        返回影响的行数即可  int类型</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##JDBC&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JAVA Database Connectivity java 数据库连接&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;为什么会出现JDBC&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;SUN公司提供
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="ye-yihui.github.io/2017/10/17/hello-world/"/>
    <id>ye-yihui.github.io/2017/10/17/hello-world/</id>
    <published>2017-10-17T12:54:30.445Z</published>
    <updated>2017-10-17T12:54:30.445Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
